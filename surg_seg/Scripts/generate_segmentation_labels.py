# import relevant classes
from pathlib import Path
import sys
import os
from typing import Tuple
import cv2 as cv
import glob
import argparse

from natsort import natsorted
from surg_seg.Utils.LabelGenerator import LabelGenerator  # customized image class
import click


def processing_paths(input_dir: str, output_dir) -> Tuple[Path, Path]:
    pass


@click.command()
@click.option(
    "--input_dir",
    "-i",
    type=str,
    required=True,
    help="path to the folder that contains the image folder, i.e. ~/data/rec01",
)
@click.option(
    "output_dir",
    "-o",
    type=str,
    required=False,
    default=None,
    help="output directory, default is current working directory.",
)
@click.option(
    "sample_every", "-s", type=int, default=10, help="sample every n frames, default is 10."
)
def main(input_dir, output_dir, sample_every):
    """
    Generate training labels from raw ambf recorded data. To use this script
    you need to specify a input_path containing the raw images generated by the
    `ros_video_record.py` script. The output_dir is optional. If not specified,
    the output will be saved in the current working directory."""

    input_dir = Path(input_dir)
    if output_dir is not None:
        output_dir = Path(output_dir)
    else:
        output_dir = Path.cwd() / "output"
    print(f"Output folder: {output_dir}")

    if not output_dir.exists():
        output_dir.mkdir(parents=True)

    sub_folder_name = output_dir / input_dir.name
    sub_folder_name.mkdir(exist_ok=True)

    category = [
        "annotation2colors",
        "annotation4colors",
        "annotation5colors",
        "raw",
        "annotationAMBF",
    ]
    category_folder_name = list()
    for catg in category:
        new_subfolder = output_dir / input_dir.name / catg
        category_folder_name.append(new_subfolder)
        new_subfolder.mkdir(exist_ok=True)

    # ---------------------------------------------
    # output file setup
    # ---------------------------------------------
    width, height = 1280, 480
    frameSize = (int(width / 2), height)

    filenames = natsorted(input_dir.glob("*.png"))
    fourcc = cv.VideoWriter_fourcc(*"DIVX")
    print("-- Initiation complete, start annotating...")

    # ---------------------------------------------
    # start processing raw images
    # ---------------------------------------------
    for x in range(5):
        vid = cv.VideoWriter(
            str(category_folder_name[x] / f"{input_dir.name}_seg_{category[x]}.avi"),
            fourcc,
            2,
            frameSize,
        )

        counter = 0
        total = len(filenames) / sample_every + 1

        for img in filenames:
            cur_img = LabelGenerator(str(img))
            un_select = int(cur_img.seg_str) % sample_every != 0
            if un_select:
                continue

            if x == 3:
                new_img = cur_img.get_rawImage()
            elif x == 4:
                new_img = cur_img.get_ambfAnnotation()
            else:
                new_img = cur_img.get_annotation(x)

            output_name = f"{int(cur_img.seg_str):06d}"
            cv.imwrite(str(category_folder_name[x] / f"img_{output_name}.png"), new_img)
            vid.write(new_img)

            counter += 1
            sys.stdout.write(
                "\r-- Annotation %d / 5 | Progress %02.1f%%"
                % (x + 1, float(counter) / float(total) * 100.0)
            )
            sys.stdout.flush()

        vid.release()

    print("\n Annotation formatting complete!")


if __name__ == "__main__":
    main()
